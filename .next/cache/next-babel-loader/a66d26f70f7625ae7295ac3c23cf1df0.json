{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport styles from '../styles/login.module.scss';\nimport Link from 'next/link';\nimport Head from 'next/head';\nimport backgroundlogin from '../assets/backgrounds/background_banner.png';\nimport BtnPrimary from '../components/main/btnPrimary';\nimport Layout from '../components/main/layout';\nimport Cookies from 'js-cookie';\nimport { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport Router from 'next/router';\nexport async function getServerSideProps({\n  req,\n  res\n}) {\n  var userdata = [];\n  {\n    /* Check if we have section named \"cookie\" in\n     the headers of the request that came to the server */\n  }\n\n  if (req.headers.cookie) {\n    {\n      /* Split the section \"cookie\" in dictionary */\n    }\n    var str = req.headers.cookie.split('; ');\n    var cookies = {};\n\n    for (var i = 0; i < str.length; i++) {\n      var cur = str[i].split('=');\n      cookies[cur[0]] = cur[1];\n    }\n\n    if (cookies['token']) {\n      res.setHeader(\"location\", \"/account\");\n      res.statusCode = 302;\n    }\n  }\n\n  return {\n    props: {\n      userdata\n    }\n  };\n}\nexport default function Login() {\n  const {\n    0: validation,\n    1: setValidation\n  } = useState(false);\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n\n  const onSubmit = data => {\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    var requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: JSON.stringify({\n        \"username\": data.username,\n        \"password\": data.password\n      })\n    };\n    fetch(\"https://www.trainingapi.tk/auth/jwt/create\", requestOptions).then(response => response.json()).then(result => {\n      if (result.access) {\n        Cookies.set('token', result.access);\n        window.location.href = \"/account\";\n      } else {\n        setValidation(true);\n      }\n\n      ;\n    }).catch(error => console.log('error', error));\n  };\n\n  return __jsx(Layout, null, __jsx(Head, null, __jsx(\"script\", {\n    type: \"application/ld+json\",\n    dangerouslySetInnerHTML: {\n      __html: JSON.stringify({\n        \"@context\": \"https://schema.org/\",\n        \"@type\": \"BreadcrumbList\",\n        \"itemListElement\": [{\n          \"@type\": \"ListItem\",\n          \"position\": 1,\n          \"name\": \"Home\",\n          \"item\": \"http://bdf0a72fd508.ngrok.io/\"\n        }, {\n          \"@type\": \"ListItem\",\n          \"position\": 2,\n          \"name\": \"Login\",\n          \"item\": \"http://bdf0a72fd508.ngrok.io/login\"\n        }]\n      })\n    }\n  })), __jsx(\"div\", {\n    className: styles.Login,\n    style: {\n      backgroundImage: 'url(' + backgroundlogin + ')'\n    }\n  }, __jsx(\"div\", {\n    className: styles.Login_inner\n  }, validation ? __jsx(\"h3\", null, \"Wrong Username or Password\") : \"\", __jsx(\"h2\", null, \"Login\"), __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"div\", {\n    className: styles.Login_username\n  }, __jsx(\"input\", {\n    type: \"text\",\n    name: \"username\",\n    ref: register\n  }), __jsx(\"label\", null, \"Username\")), __jsx(\"div\", {\n    className: styles.Login_password\n  }, __jsx(\"input\", {\n    type: \"password\",\n    name: \"password\",\n    autocomplete: \"on\",\n    ref: register\n  }), __jsx(\"label\", null, \"Password\")), __jsx(BtnPrimary, {\n    type: \"submit\",\n    name: \"login\"\n  })), __jsx(\"p\", null, \"Don't have an accout?\"), __jsx(Link, {\n    href: \"/register\"\n  }, __jsx(\"a\", null, \"Register\")))));\n}","map":null,"metadata":{},"sourceType":"module"}